{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This documentation is WIP. (The name is as well)</p> <p>Those looking to contribute should read the README and the planned documentation skeleton.</p>"},{"location":"events/","title":"Welcome to Packdev Docs","text":""},{"location":"events/startup/registry/blockbuilder/","title":"Custom Blocks","text":"<p>Work In Progress</p> <p>The contents found here are not completely documented, please consider submitting a Pull Request with additional information.</p>"},{"location":"events/startup/registry/blockbuilder/#example-block","title":"Example Block","text":"<pre><code>StartupEvents.registry('block', event =&gt; {\n    event.create('glowing_obsidian_glass')\n        .displayName('Glowing Obsidian Glass')\n        .mapColor('color_black')\n        .soundType('glass')\n        .hardness(2.0)\n        .resistance(6.0)\n        .lightLevel(0.8)\n        .renderType('translucent')\n        .textureAll('kubejs:block/glowing_obsidian_glass')\n        .tagBlock('minecraft:mineable/pickaxe')\n        .tagBlock('minecraft:needs_iron_tool')\n        .waterlogged()\n        .box(2, 0, 2, 14, 16, 14, true)\n        .fullBlock(false);\n});\n</code></pre>"},{"location":"events/startup/registry/blockbuilder/#blockbuilder-methods","title":"BlockBuilder Methods","text":""},{"location":"events/startup/registry/blockbuilder/#core-properties","title":"Core Properties","text":"<ul> <li> <p><code>displayName(value: TextComponent)</code>   Sets the block's display name.</p> </li> <li> <p><code>mapColor(value: MapColor)</code>   Sets the block's map color (1.20.1+ only). Use lowercase color IDs like 'color_light_green'.</p> </li> <li> <p><code>soundType(value: SoundType)</code>   Sets the block's sound type (1.20.1+ only). Use sound type IDs like 'glass', 'wood'.</p> </li> <li> <p><code>hardness(value: float)</code>   Sets block hardness (mining time). Higher values take longer to mine.</p> </li> <li> <p><code>resistance(value: float)</code>   Sets explosion resistance. Higher values resist explosions better.</p> </li> <li> <p><code>unbreakable()</code>   Makes block unbreakable (like bedrock). Sets hardness=-1, resistance=MAX_VALUE.</p> </li> </ul>"},{"location":"events/startup/registry/blockbuilder/#sound-type-shortcuts","title":"Sound Type Shortcuts","text":"<p>Shortcut methods for common sound types:</p> <ul> <li> <p><code>noSoundType()</code></p> </li> <li> <p><code>woodSoundType()</code></p> </li> <li> <p><code>stoneSoundType()</code></p> </li> <li> <p><code>gravelSoundType()</code></p> </li> <li> <p><code>grassSoundType()</code></p> </li> <li> <p><code>sandSoundType()</code></p> </li> <li> <p><code>cropSoundType()</code></p> </li> <li> <p><code>glassSoundType()</code></p> </li> </ul>"},{"location":"events/startup/registry/blockbuilder/#visual-properties","title":"Visual Properties","text":"<ul> <li> <p><code>lightLevel(value: float)</code>   Sets light emission (0.0-1.0). 0.0=no light, 1.0=full light.</p> </li> <li> <p><code>renderType(type)</code>   Sets rendering type.</p> <ul> <li><code>solid</code>: For fully opaque blocks</li> <li><code>cutout</code>: For textures with transparency (e.g., glass)</li> <li><code>translucent</code>: For semi-transparent textures (e.g., stained glass)</li> </ul> </li> <li> <p><code>color(tintIndex: int, color: Color)</code>   Recolors specific texture layers.</p> </li> <li> <p><code>textureAll(texture: ID)</code>   Textures all sides identically. Path format: 'namespace:block/texture_name'.</p> </li> <li> <p><code>texture(side: Direction, texture: ID)</code>   Textures specific side individually.</p> </li> <li> <p><code>model(model: ID)</code>   Specifies custom model. Path format: 'namespace:block/model_name'.</p> </li> <li> <p><code>defaultCutout()</code>   Sets up cutout rendering for glass-like blocks.</p> </li> <li> <p><code>defaultTranslucent()</code>   Sets up translucent rendering for semi-transparent blocks.</p> </li> </ul>"},{"location":"events/startup/registry/blockbuilder/#physical-properties","title":"Physical Properties","text":"<ul> <li> <p><code>opaque(value: boolean)</code>   Sets whether block is opaque. Opaque blocks don't transmit light.</p> </li> <li> <p><code>fullBlock(value: boolean)</code>   Sets full block rendering. Set false for custom hitboxes.</p> </li> <li> <p><code>box(x0, y0, z0, x1, y1, z1: float, scale16?: boolean)</code>   Defines custom collision box. Multiple calls add multiple boxes. scale16=true uses 0-16 scale.</p> </li> <li> <p><code>noCollision()</code>   Removes collision box. Entities can pass through.</p> </li> <li> <p><code>notSolid()</code>   Marks block as non-solid. Affects rendering.</p> </li> <li> <p><code>slipperiness(value: float)</code>   Sets slipperiness. Affects entity movement (default: 0.6).</p> </li> <li> <p><code>speedFactor(value: float)</code>   Sets movement speed modifier. Affects player movement speed.</p> </li> <li> <p><code>jumpFactor(value: float)</code>   Sets jump height modifier. Affects jump height.</p> </li> </ul>"},{"location":"events/startup/registry/blockbuilder/#functional-properties","title":"Functional Properties","text":"<ul> <li> <p><code>property(value: BlockProperty)</code>   Adds blockstates. E.g., waterlogged, facing directions.</p> </li> <li> <p><code>requiresTool(value: boolean)</code>   Requires tool for drops. Uses block tags to determine valid tools.</p> </li> <li> <p><code>waterlogged()</code>   Enables waterlogging. Block can contain water.</p> </li> <li> <p><code>noDrops()</code>   Disables block drops. No drops even with Silk Touch.</p> </li> <li> <p><code>noValidSpawns(value: boolean)</code>   Disables mob spawning.</p> </li> <li> <p><code>suffocating(value: boolean)</code>   Causes suffocation damage.</p> </li> <li> <p><code>viewBlocking(value: boolean)</code>   Blocks player view.</p> </li> <li> <p><code>redstoneConductor(value: boolean)</code>   Conducts redstone. True by default.</p> </li> <li> <p><code>transparent(value: boolean)</code>   Sets transparency. Affects rendering.</p> </li> </ul>"},{"location":"events/startup/registry/blockbuilder/#tags","title":"Tags","text":"<ul> <li> <p><code>tagBlock(tag: ID)</code>   Adds tag to block.</p> </li> <li> <p><code>tagItem(tag: ID)</code>   Adds tag to block's item.</p> </li> <li> <p><code>tagBoth(tag: ID)</code>   Adds tag to both block and item.</p> </li> </ul>"},{"location":"events/startup/registry/blockbuilder/#advanced-features","title":"Advanced Features","text":"<ul> <li> <p><code>randomTick(callback: Consumer&lt;RandomTickEvent&gt;)</code>   Sets random tick callback.</p> </li> <li> <p><code>item(callback: Consumer&lt;ItemBuilder&gt;)</code>   Modifies block's item properties.</p> </li> <li> <p><code>setLootTableJson(json: Object)</code>   Sets custom loot table. Direct JSON input.</p> </li> <li> <p><code>setBlockstateJson(json: Object)</code>   Sets custom blockstate JSON. Direct JSON input.</p> </li> <li> <p><code>setModelJson(json: Object)</code>   Sets custom model JSON. Direct JSON input.</p> </li> <li> <p><code>noItem()</code>   Removes associated item. Player cannot hold/place.</p> </li> </ul>"},{"location":"events/startup/registry/fluidbuilder/","title":"Custom Fluids","text":"<p>Work In Progress</p> <p>The contents found here are not completely documented, please consider submitting a Pull Request with additional information.</p>"},{"location":"events/startup/registry/fluidbuilder/#example-fluids","title":"Example Fluids","text":"<pre><code>// Basic thick fluid (lava-like) with red tint\nevent.create('thick_fluid')\n .thickTexture(0xFF0000) // (1)\n .bucketColor(0xFF0000)  // (2)\n .displayName('Thick Fluid'); // (3)\n\n// Basic thin fluid (water-like) with cyan tint\nevent.create('thin_fluid')\n .thinTexture(0x00FFFF)  // (1)\n .bucketColor(0x00FFFF)  // (2)\n .displayName('Thin Fluid') // (3)\n .noBucket() // (4)\n .noBlock(); // (5)\n\n// Fluid with custom textures\nevent.create('strawberry_cream')\n .displayName('Strawberry Cream')\n .stillTexture('kubejs:block/strawberry_still') // (6)\n .flowingTexture('kubejs:block/strawberry_flow') // (6)\n .bucketColor(0xFF33FF) \n .gaseous(); // (7)\n\n// Fluid with modified bucket item\nevent.create('taco_sauce')\n .thickTexture(0xff0000) // (1)\n .bucketColor(0xff0000)  // (2)\n .bucketItem.group('food'); // (8)\n</code></pre> <ol> <li>Texture: Defines the fluid's appearance (e.g., thick or thin).  </li> <li>Bucket Color: Sets the color of the fluid's bucket.  </li> <li>Display Name: Sets the fluid's in-game name.  </li> <li>No Bucket: Prevents the creation of a bucket for the fluid.  </li> <li>No Block: Prevents the creation of a fluid block.  </li> <li>Custom Textures: Allows specifying still and flowing textures.  </li> <li>Gaseous: Makes the fluid flow upward instead of downward.  </li> <li>Bucket Customization: Modifies bucket properties (e.g., group).  </li> </ol>"},{"location":"events/startup/registry/fluidbuilder/#fluidbuilder-methods","title":"FluidBuilder Methods","text":""},{"location":"events/startup/registry/fluidbuilder/#basic-properties","title":"Basic Properties","text":"<ul> <li> <p><code>displayName(name: TextComponent)</code>   Sets the fluid's display name.</p> </li> <li> <p><code>rarity(value: string)</code>   Sets fluid rarity. Values: 'common', 'uncommon', 'rare', 'epic'.</p> </li> <li> <p><code>color(color: int)</code>   Sets the fluid color.</p> </li> <li> <p><code>bucketColor(color: int)</code>   Sets the bucket color.</p> </li> </ul>"},{"location":"events/startup/registry/fluidbuilder/#texture-methods","title":"Texture Methods","text":"<ul> <li> <p><code>thinTexture(color: int)</code>   Creates water-like thin texture with the specified color.</p> </li> <li> <p><code>thickTexture(color: int)</code>   Creates lava-like thick texture with the specified color.</p> </li> <li> <p><code>stillTexture(path: ResourceLocation)</code>   Sets custom still texture path (e.g., 'kubejs:block/strawberry_still').</p> </li> <li> <p><code>flowingTexture(path: ResourceLocation)</code>   Sets custom flowing texture path (e.g., 'kubejs:block/strawberry_flow').</p> </li> <li> <p><code>builtinTextures()</code>   Uses built-in fluid textures.</p> </li> </ul>"},{"location":"events/startup/registry/fluidbuilder/#fluid-behavior","title":"Fluid Behavior","text":"<ul> <li> <p><code>noBucket()</code>   Prevents bucket item creation</p> </li> <li> <p><code>noBlock()</code>   Prevents fluid block creation</p> </li> <li> <p><code>gaseous()</code>   Makes fluid flow upward instead of downward. (Not a Mekanism gas!)</p> </li> </ul>"},{"location":"events/startup/registry/fluidbuilder/#modded-properties","title":"Modded Properties","text":"<p>These can be used, but will only have an effect if a mod adds a purpose for them.</p> <ul> <li> <p><code>luminosity(value: int)</code>   Sets light level (default: 0).</p> </li> <li> <p><code>density(value: int)</code>   Sets density (default: 1000).</p> </li> <li> <p><code>temperature(value: int)</code>   Sets temperature (default: 300).</p> </li> <li> <p><code>viscosity(value: int)</code>   Sets viscosity (default: 1000).</p> </li> </ul>"},{"location":"events/startup/registry/fluidbuilder/#bucket-customization","title":"Bucket Customization","text":"<ul> <li><code>bucketItem</code>   Allows chaining item builder methods to customize the bucket item.</li> </ul>"},{"location":"events/startup/registry/fluidbuilder/#texture-guidelines","title":"Texture Guidelines","text":""},{"location":"events/startup/registry/fluidbuilder/#still-texture","title":"Still Texture","text":"<ul> <li>Recommended size: 16x16 pixels</li> <li>For animated textures: 16x48 (3 frames), 16x80 (5 frames), or 16x240 (15 frames)</li> <li>Optimal frame counts: 3, 5, 15, 6, 10, or 30 for smooth animation </li> </ul>"},{"location":"events/startup/registry/fluidbuilder/#flowing-texture","title":"Flowing Texture","text":"<ul> <li>Recommended size: 32x480 pixels with mcmeta animation</li> <li>Each frame should be 32x32 pixels</li> <li>Frames are vertically shifted by 1 pixel for flowing effect</li> <li>Warning: Creating flowing textures manually is not recommended due to complexity </li> </ul>"},{"location":"events/startup/registry/itembuilder/","title":"Custom Items","text":"<p>Work In Progress</p> <p>The contents found here are not completely documented, please consider submitting a Pull Request with additional information.</p>"},{"location":"events/startup/registry/itembuilder/#example-items","title":"Example Items","text":"<pre><code>StartupEvents.registry('item', event =&gt; {\n    event.create('enchanted_crystal')\n        .displayName('Enchanted Crystal')\n        .rarity('uncommon')\n        .glow(true)\n        .maxStackSize(16)\n        .useDuration(32)\n        .tagItem('minecraft:piglin_loved')\n        .burnTime(1600)\n        .model('kubejs:item/enchanted_crystal');\n});\n\n    event.create('custom_sword', 'sword').tier('diamond').attackDamageBaseline(10.0)\n\n    event.create('magic_steak')\n        .food(food =&gt; { food\n            .hunger(6)\n            .saturation(6)\n            .effect('minecraft:speed', 600, 0, 1)\n            .removeEffect('minecraft:poison')\n            .alwaysEdible()\n            .fastToEat()\n            .meat()\n    })\n</code></pre>"},{"location":"events/startup/registry/itembuilder/#itembuilder-methods","title":"ItemBuilder Methods","text":""},{"location":"events/startup/registry/itembuilder/#item-types","title":"Item types","text":"<ul> <li>Unset/Default<ul> <li>'basic'</li> </ul> </li> <li>Tools<ul> <li>'sword', 'pickaxe', 'axe', 'shovel', 'shears', 'hoe'</li> </ul> </li> <li>Armor<ul> <li>'helmet', 'chestplate', 'leggings', 'boots'</li> </ul> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#basic-properties","title":"Basic Properties","text":"<ul> <li> <p><code>displayName(name: TextComponent)</code>   Sets the item's display name .</p> </li> <li> <p><code>maxStackSize(size: int)</code>   Sets the maximum stack size (1-64) .</p> </li> <li> <p><code>maxDamage(damage: int)</code>   Sets maximum durability for damageable items.</p> </li> <li> <p><code>rarity(rarity: string)</code>   Sets item rarity. Values: 'common', 'uncommon', 'rare', 'epic' .</p> </li> <li> <p><code>fireResistant()</code>   Makes item immune to fire and lava (like netherite tools).</p> </li> <li> <p><code>glow(glow: boolean)</code>   Adds enchantment glint effect to the item, even if it is not enchanted.</p> </li> <li> <p><code>unstackable()</code>   Sets maximum stack size to 1.</p> </li> <li> <p><code>useDuration(duration: int)</code>   Sets how long the item takes to use (in ticks).</p> </li> <li> <p><code>useAnimation(animation)</code>   Determines the animation of the item when used, e.g. eating food.</p> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#tool-properties","title":"Tool Properties","text":"<pre><code>- `tier(toolTier: string)`\nSets the tool tier. Default Values: 'wood', 'stone', 'iron', 'gold', 'diamond', 'netherite'\n- `modifyTier(tier =&gt; ...)` - Modifies the tool tier. Uses the same syntax as custom tool tiers. Refer to \"Custom Tiers\" for more details.\n- `attackDamageBaseline(damage: float)` - Sets the baseline attack damage. Only modify this if creating a custom weapon such as a Spear, Battleaxe, etc.\n- `attackDamageBonus(damage: float)` - Adds a bonus to the attack damage.\n- `speedBaseline(speed: float)` - Sets the baseline attack speed. Only modify this for custom weapon types.\n- `speed(speed: float)` - Sets the attack speed.\n</code></pre>"},{"location":"events/startup/registry/itembuilder/#food-properties","title":"Food Properties","text":"<ul> <li><code>food(consumer: Consumer&lt;FoodBuilder&gt;)</code>   Configures food properties. Available FoodBuilder methods:</li> <li><code>hunger(value: int)</code>   Sets hunger restoration</li> <li><code>saturation(value: float)</code>   Sets saturation modifier</li> <li><code>alwaysEdible()</code>   Can be eaten even when not hungry</li> <li><code>fastToEat()</code>   Reduces eating time (sweet berries)</li> <li><code>meat()</code>   Marks as meat (can feed to wolves)</li> <li><code>effect(effect: ID, duration: int, amplifier: int, probability: float)</code>   Adds consumption effect</li> <li><code>removeEffect(effect: ID)</code>   Removes effect on consumption</li> </ul>"},{"location":"events/startup/registry/itembuilder/#model-texture","title":"Model &amp; Texture","text":"<ul> <li> <p><code>model(model: ResourceLocation)</code>   Sets the item model.</p> </li> <li> <p><code>texture(texture: ResourceLocation)</code>   Sets the item texture.</p> </li> <li> <p><code>parentModel(parent: ResourceLocation)</code>   Sets parent model for item.</p> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#tags","title":"Tags","text":"<ul> <li> <p><code>tagItem(tag: ResourceLocation)</code>   Adds tag to the item.</p> </li> <li> <p><code>tagBlock(tag: ResourceLocation)</code>   Adds tag to the item's block (if applicable).</p> </li> <li> <p><code>tagBoth(tag: ResourceLocation)</code>   Adds tag to both item and its block.</p> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#advanced-properties","title":"Advanced Properties","text":"<ul> <li> <p><code>burnTime(ticks: int)</code>   Sets fuel burn time in ticks.</p> </li> <li> <p><code>craftingRemainder(item: ItemProvider)</code>   Sets the item that remains after crafting (e.g., bucket for milk) .</p> </li> <li> <p><code>tooltip(vararg lines: TextComponent)</code>   Adds tooltip lines to the item.</p> </li> <li> <p><code>color(color: int)</code>   Sets item color (for tinted items).</p> </li> <li> <p><code>enchantableValue(value: int)</code>   Sets enchantability value.</p> </li> <li> <p><code>enchantmentGlint(glint: boolean)</code>   Controls enchantment glint effect.</p> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#nbt-custom-properties","title":"NBT &amp; Custom Properties","text":"<ul> <li> <p><code>nbt(nbt: CompoundTag)</code>   Sets custom NBT data for the item.</p> </li> <li> <p><code>defaultInstance(consumer: Consumer&lt;ItemStack&gt;)</code>   Modifies the default item instance.</p> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#equipment-properties","title":"Equipment Properties","text":"<ul> <li><code>equipmentSlot(slot: EquipmentSlot)</code>   Sets the equipment slot.</li> </ul>"},{"location":"events/startup/registry/itembuilder/#special-item-types","title":"Special Item Types","text":"<ul> <li> <p><code>blockItem()</code>   Marks as a block item.</p> </li> <li> <p><code>bucketItem()</code>   Configures as a bucket item.</p> </li> </ul>"},{"location":"events/startup/registry/itembuilder/#foodeaten","title":"Foodeaten","text":"<p>Note</p> <p>This is a server event.</p> <pre><code>ItemEvents.foodEaten(event =&gt; {\n  const { player, item } = event;\n  if (item.id === 'kubejs:magic_steak') {\n    player.tell(Text.gold('Yummy Yummy!'));\n  }\n});\n</code></pre>"},{"location":"events/startup/registry/tierregistry/","title":"Custom Tiers","text":"<p>Work In Progress</p> <p>The contents found here are not completely documented, please consider submitting a Pull Request with additional information.</p>"},{"location":"events/startup/registry/tierregistry/#tool-tiers","title":"Tool Tiers","text":"<pre><code>ItemEvents.toolTierRegistry(event =&gt; {\n  event.add('tier_id', tier =&gt; {\n    tier.uses = 250\n    tier.speed = 6.0\n    tier.attackDamageBonus = 2.0\n    tier.level = 2\n    tier.enchantmentValue = 14\n    tier.repairIngredient = '#forge:ingots/iron'\n  })\n})\n</code></pre>"},{"location":"events/startup/registry/tierregistry/#armor-tiers","title":"Armor Tiers","text":"<pre><code>ItemEvents.armorTierRegistry(event =&gt; {\n  event.add('tier_id', tier =&gt; {\n    tier.durabilityMultiplier = 15 // Each slot will be multiplied with [13, 15, 16, 11]\n    tier.slotProtections = [2, 5, 6, 2] // Slot indicies are [FEET, LEGS, BODY, HEAD]\n    tier.enchantmentValue = 9\n    tier.equipSound = 'minecraft:item.armor.equip_iron'\n    tier.repairIngredient = '#forge:ingots/iron'\n    tier.toughness = 0.0 // diamond has 2.0, netherite 3.0\n    tier.knockbackResistance = 0.0\n  })\n})\n</code></pre>"},{"location":"introduction/","title":"Introduction","text":"<p>The introduction section of this website serves to teach new users the information that they need to be able to make their own modpacks with KubeJS. The information found in this section is not fully comprehensive (I.E. not every single recipe event will be covered, etc), instead focusing on teaching users so they are able to read the rest of the documentation, and be able to apply it. </p> <p>However, that doesn't mean what is found here is lacking, quite the opposite. In fact, those looking to simply add a recipe or two with KubeJS (wanting an eltyra recipe for that SMP?) will only need to read the first two pages! </p> <p>Regardless of what you are here for, thanks for reading! Those looking to contribute can refer back to the home page for more information.</p>"},{"location":"introduction/#annotations","title":"Annotations","text":"<p>Icons can be found within some code blocks. Clicking on them will reveal more information.</p> <pre><code>console.log('This is a line of code!')  // (1)\n</code></pre> <ol> <li>And this is a comment!</li> </ol>"},{"location":"introduction/advanced/attribute-modification/","title":"Header","text":"<p>Page content here...</p>"},{"location":"introduction/advanced/reflection/","title":"Reflection","text":"<p>Page content here...</p>"},{"location":"introduction/advanced/worldgen/","title":"Header","text":"<p>Page content here...</p>"},{"location":"introduction/datapacking/custom-recipes/","title":"Custom Recipes","text":"<p>If a mod supports Datapack recipes, you can add recipes for it without any addon mod support! If a mod has a GitHub repository or other source code, you can find the relevant JSON files in <code>/src/generated/resources/data/&lt;modname&gt;/recipes/</code>. Otherwise, you may be able to find it by unzipping the mod's <code>.jar</code> file.</p>"},{"location":"introduction/datapacking/custom-recipes/#writing-a-custom-recipe","title":"Writing a custom recipe","text":"<p>Here's an example of adding a Farmer's Delight cutting board recipe, which defines an input, output, and tool taken straight from their GitHub. Notice how the variables match between the datapack file and an <code>event.custom</code> recipe replicating it.</p> Datapack Fileevent.custom <pre><code>{\n  \"type\": \"farmersdelight:cutting\",\n  \"ingredients\": [\n    {\n      \"item\": \"minecraft:cake\"\n    }\n  ],\n  \"result\": [\n    {\n      \"count\": 7,\n      \"item\": \"farmersdelight:cake_slice\"\n   }\n ],\n  \"tool\": {\n   \"tag\": \"forge:tools/knives\"\n  }\n}   \n</code></pre> <pre><code>event.custom({\n  type: 'farmersdelight:cutting',\n  ingredients: [\n    {\n      item: 'minecraft:cake'\n    }\n  ],\n  result: [\n    {\n      item: 'farmersdelight:cake_slice',\n      count: 7\n    }\n  ],\n  tool: {\n    tag: 'forge:tools/knives'\n  }\n});\n</code></pre>"},{"location":"introduction/datapacking/custom-recipes/#looping","title":"Looping","text":"<p>Of course, this starts becoming powerful when you start to combine them with a loop, function or otherwise, allowing you to easily add tons of custom recipes without having to manage a single datapack file.</p> <pre><code>let redstoneTransmute = (input, output) =&gt; {\n    event.custom({\n        \"type\": \"tconstruct:casting_basin\",\n        \"cast\": { \"item\": input },\n        \"cast_consumed\": true,\n        \"fluid\": {\n            \"name\": \"thermal:redstone\",\n            \"amount\": 50\n        },\n        \"result\": output,\n        \"cooling_time\": 30\n    })\n}\n\nredstoneTransmute(\"minecraft:cobblestone\", \"minecraft:netherrack\")\nredstoneTransmute(\"minecraft:sand\", \"minecraft:red_sand\")\n// etc...\n</code></pre>"},{"location":"introduction/datapacking/custom-recipes/#recipe-schemas","title":"Recipe Schemas","text":"<p>Work In Progress</p> <p>The contents found here are not completely documented, please consider submitting a Pull Request with additional information.</p> <p>Note</p> <p>This is being written with 1.20 currently being in the lead of packdev COLTS vote in mind, KubeJS 1.21 handles this differently. </p> <p>Now, if you have a recipe type that you use frequently, it might be worth writing your own recipe schema for it. Recipe schemas are sets of keys that define how a recipe is constructed. How this works is covered in more detail in the reflection chapter (for those unfamiliar with Java, please read that first), and assumes you have at least basic knowledge of how recipes work.</p>"},{"location":"introduction/datapacking/custom-recipes/#defining-the-recipe-schema","title":"Defining the Recipe Schema","text":"<p>To begin, you first need to define the schema you're going to use in your startup scripts.</p>"},{"location":"introduction/datapacking/custom-recipes/#what-goes-in","title":"What Goes In?","text":"<p>Let's use Extended Crafting's Combination Crafting as an example. It might seem complicated compared to some other recipe types, but it's manageable once you break it down. As a refresher, here's how it works if you haven't used Extended Crafting before.</p> <p>Here's a datapack example: <pre><code>{\n  \"type\": \"extendedcrafting:combination\",\n  \"powerCost\": 400000,\n  \"input\": {\n    \"item\": \"minecraft:iron_ingot\"\n  },\n  \"ingredients\": [\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    },\n    {\n      \"item\": \"minecraft:potato\"\n    }\n  ],\n  \"result\": {\n    \"item\": \"minecraft:stone\"\n  }\n}\n</code></pre></p> <p>Let's break it down into it's parts:</p> <ul> <li> <p>An ItemStack <code>input</code> field</p> </li> <li> <p>An ItemStack <code>ingredients</code> array </p> </li> <li> <p>An ItemStack <code>result</code> field</p> </li> <li> <p>An integer <code>powerCost</code> field </p> </li> </ul> <p>Reviewing the Java implementation reveals an additional field:</p> <ul> <li>An optional integer <code>power_rate</code> field </li> </ul> The Java implementation <pre><code>  public static class Serializer implements RecipeSerializer&lt;CombinationRecipe&gt; {\n      public static final MapCodec&lt;CombinationRecipe&gt; CODEC = RecordCodecBuilder.mapCodec(builder -&gt;\n              builder.group(\n                      Ingredient.CODEC_NONEMPTY.fieldOf(\"input\").forGetter(recipe -&gt; recipe.input),\n                      Ingredient.CODEC_NONEMPTY\n                              .listOf()\n                              .fieldOf(\"ingredients\")\n                              .flatXmap(\n                                      field -&gt; {\n                                        var max = 48;\n                                        var ingredients = field.toArray(Ingredient[]::new);\n                                        if (ingredients.length == 0) {\n                                            return DataResult.error(() -&gt; \"No ingredients for Combination recipe\");\n                                        } else {\n                                            return ingredients.length &gt; max\n                                                    ? DataResult.error(() -&gt; \"Too many ingredients for Combination recipe. The maximum is: %s\".formatted(max))\n                                                    : DataResult.success(NonNullList.of(Ingredient.EMPTY, ingredients));\n                                        }\n                                    },\n                                    DataResult::success\n                            )\n                            .forGetter(recipe -&gt; recipe.inputs),\n                    ItemStack.STRICT_CODEC.fieldOf(\"result\").forGetter(recipe -&gt; recipe.result),\n                    Codec.INT.fieldOf(\"power_cost\").forGetter(recipe -&gt; recipe.powerCost),\n                    Codec.INT.optionalFieldOf(\"power_rate\", ModConfigs.CRAFTING_CORE_POWER_RATE.get()).forGetter(recipe -&gt; recipe.powerRate)\n            ).apply(builder, CombinationRecipe::new)\n    );\n}\n</code></pre>"},{"location":"introduction/datapacking/custom-recipes/#schema-creation","title":"Schema Creation","text":"<p>After reviewing KubeJS's schema and component classes, you can create the schema using <code>ItemComponents</code> and <code>NumberComponent</code>:</p> <pre><code>const $RecipeSchema = Java.loadClass(\"dev.latvian.mods.kubejs.recipe.schema.RecipeSchema\"); // (1)\nconst $ItemComponents = Java.loadClass(\"dev.latvian.mods.kubejs.recipe.component.ItemComponents\");\nconst $NumberComponent = Java.loadClass(\"dev.latvian.mods.kubejs.recipe.component.NumberComponent\");\n\n\nStartupEvents.recipeSchemaRegistry(event =&gt; {\n    event.register(\"extendedcrafting:combination\", new $RecipeSchema( // (2)\n        $ItemComponents.OUTPUT.key(\"result\"),\n        $ItemComponents.INPUT.key(\"input\"),\n        $ItemComponents.UNWRAPPED_INPUT_ARRAY.key(\"ingredients\"),\n        $NumberComponent.INT.key(\"powerCost\").optional(500000).preferred(\"powerCost\"), // (3)\n        $NumberComponent.INT.key(\"powerRate\").defaultOptional().preferred(\"powerRate\")\n    )\n    );\n})\n</code></pre> <ol> <li>Imports the <code>RecipeSchema</code> class, needed to write your own recipe schemas</li> <li>Note that the order of the keys does not have to match the java code or any existing datapack files, so feel free to organize it into whatever way is most comfortable for writing with.</li> <li>If not set, defaults to a value of 500000</li> </ol> <p>Now for the fun part: Actually using it!</p> <pre><code>    event.recipes.extendedcrafting.combination(\n        \"kubejs:quantum_fluxed_eternium_heavy_plating\",\n        \"gtceu:cryococcus_plate\", [\"2x redstone_arsenal:flux_plating\", \"3x kubejs:quantum_flux\"],\n        1600000, 160000\n    )\n</code></pre>"},{"location":"introduction/datapacking/loading-data/","title":"Loading Data with KubeJS","text":"<p>You can also use KubeJS to load assets from resource packs and data from datapacks!</p>"},{"location":"introduction/datapacking/loading-data/#loading-assets","title":"Loading Assets","text":"<p>Resource pack assets (custom textures, language files, etc.) can be placed in <code>kubejs/assets</code> to be loaded. This folder is loaded the same way as the <code>assets</code> folder in a resource pack. Assets in this folder will not appear as a separate resource pack and will be automatically loaded for every world.</p> <p>If you already have a resource pack, you can simply copy the folder(s) from inside the resource pack\u2019s <code>assets</code> folder into KubeJS\u2019s <code>assets</code> folder.</p>"},{"location":"introduction/datapacking/loading-data/#loading-data","title":"Loading Data","text":"<p>Note</p> <p>Consider looking into JsonIO if you have to generate a generate a large amount of (nonrecipe) datapack files, rather than manually writing them.</p> <p>Datapack data can be placed in <code>kubejs/data</code> to be loaded. Data within this folder will not appear as a separate datapack. It is loaded the same way as the <code>data</code> folder in a datapack and will be automatically loaded for every world.</p> <p>If you already have a datapack, you can simply copy the folder(s) from inside the datapack\u2019s <code>data</code> folder into KubeJS\u2019s <code>data</code> folder.</p>"},{"location":"introduction/getting-started/first-scripts/","title":"Your First Scripts","text":"<p>If you have launched the game at least once, you will find <code>kubejs/server_scripts/example.js</code>. It looks like this:</p> <pre><code>// priority: 0\n\n// Visit the wiki for more info - https://kubejs.com/\n\nconsole.info('Hello, World! (Loaded server scripts)')\n</code></pre>"},{"location":"introduction/getting-started/first-scripts/#breaking-it-down","title":"Breaking It Down","text":"<ul> <li> <p><code>// priority: 0</code> </p> <ul> <li>Ensures this script is loaded first if you have multiple server scripts.  </li> <li>Has no effect if there's only one server script.  </li> </ul> </li> <li> <p><code>console.info('Hello, World! (Loaded server scripts)')</code> </p> <ul> <li>Prints the message in the log.  </li> <li>This line is just an example and can be removed later.  </li> </ul> </li> </ul> <p>When the server scripts are loaded, this text is printed to the console. Neat, but not very useful on its own. So, how do we start tweaking recipes?</p>"},{"location":"introduction/getting-started/first-scripts/#your-first-recipes","title":"Your First Recipes","text":"<p>KubeJS works by calling events and acting upon them. The <code>recipes</code> event can be used to add, remove, or replace recipes. Any modifications to recipes should be done within the context of a <code>recipes</code> event. Here's how to register an event listener for <code>ServerEvents.recipes</code>:</p> <pre><code>ServerEvents.recipes(event =&gt; { // (1)\n    console.log('Hello! The recipe event has fired!') // (2) (3)\n});\n</code></pre> <ol> <li>You can replace <code>event</code> with any name, as long as you update it inside the callback too.  </li> <li>The code inside the curly braces is the callback. You can modify as many recipes as you like here.</li> <li>Like mentioned before, the <code>console.log</code> line can be removed, it is just here for demonstration purposes </li> </ol>"},{"location":"introduction/getting-started/first-scripts/#shapeless-recipes","title":"Shapeless Recipes","text":"<p>A shapeless recipe allows players to place items anywhere on the crafting grid. Here's an example:</p> <pre><code>event.shapeless('minecraft:dandelion', 3, [ // (1)\n    'minecraft:bone_meal',\n    'minecraft:yellow_dye', // (2)\n    '3x minecraft:ender_pearl'\n]);\n</code></pre> <ol> <li>Output: Produces 3 dandelions.  </li> <li>Input: An array of items required for the recipe. Maximum item count is 9.</li> </ol> <p>Putting that code into your recipe event listener and reloading the script will cause it to be registered, it's as simple as that! </p>"},{"location":"introduction/getting-started/first-scripts/#shaped-recipes","title":"Shaped Recipes","text":"<p>Shaped recipes define a specific pattern in the crafting grid. For example:</p> <pre><code>event.shaped('minecraft:stone', 3, [ // (1)\n    'A B',\n    ' C ', // (2)\n    'B A'\n], {\n    A: 'minecraft:andesite',\n    B: 'minecraft:diorite', // (3)\n    C: 'minecraft:granite'\n});\n</code></pre> <ol> <li>Output: Produces 3 stone blocks.  </li> <li>Pattern: The shape of the recipe (as an array of strings).  </li> <li>Mapping: Defines what each letter in the pattern represents.  </li> </ol> <p>Being an array, smaller patterns also work and will function as expected in a crafting grid:</p> <pre><code>ServerEvents.recipes(event =&gt; {\n    event.shaped('minecraft:bundle', [\n        'S',\n        'L'\n    ], {\n        S: 'minecraft:string',\n        L: 'minecraft:leather'\n    });\n});\n</code></pre> For strict grid positions or disabling mirroring, see here."},{"location":"introduction/getting-started/first-scripts/#smelting-and-stonecutting-recipes","title":"Smelting and Stonecutting Recipes","text":"<p>Cooking recipes are all very similar, having an output (which can be up to 64 of the same item) and an input (a single item). Recipes can also be further modified by adding or adjusting their properties. For example, XP gained is set by appending <code>.xp()</code> to the recipe, and cooking time (in ticks) is set by appending <code>.cookingTime()</code>.  <pre><code>event.smelting('3x minecraft:gravel', 'minecraft:stone') // (1)\nevent.blasting('10x minecraft:iron_nugget', 'minecraft:iron_ingot')\nevent.smoking('minecraft:tinted_glass', 'minecraft:glass').xp(0.35) // (2)\nevent.campfireCooking('minecraft:torch', 'minecraft:stick', 0.35, 600) // (3)\n</code></pre></p> <ol> <li>Cook 1 stone into 3 gravel in a Furnace.  </li> <li>Grants 0.35 XP.  </li> <li>Grants 0.35 XP and takes 600 ticks (30 seconds).  </li> </ol> <p>Stonecutter recipes are largely the same, minus the <code>.xp</code> and <code>.cookingTime</code> properties:</p> <pre><code>event.stonecutting('3x minecraft:stick', '#minecraft:planks')\n</code></pre> <p>Other types of recipes (including custom/modded recipes), as well as other modifiers, are covered here.</p>"},{"location":"introduction/getting-started/first-scripts/#recipe-removal-and-modification","title":"Recipe Removal and Modification","text":"<p>To remove recipes, use <code>event.remove()</code> with a recipe filter:</p> <pre><code>event.remove({ output: 'minecraft:stone_pickaxe' }); // (1)\n</code></pre> <ol> <li>Filter: Specifies which recipes to remove.  </li> </ol> <p>Filters can target recipes by:</p> <ul> <li>Output item: <code>{ output: '&lt;item_id&gt;' }</code> </li> <li>Input item(s): <code>{ input: '&lt;item_id&gt;' }</code> </li> <li>Mod: <code>{ mod: '&lt;mod_id&gt;' }</code> </li> <li>Recipe ID: <code>{ id: '&lt;recipe_id&gt;' }</code> </li> <li>Combinations:  <ul> <li>Require ALL conditions: <code>{ condition1: 'value', condition2: 'value2' }</code> </li> <li>Require ANY condition: <code>[ { condition_a: 'true' }, { condition_b: 'true' } ]</code> </li> <li>Negate a condition: <code>{ not: { condition: 'requirement' } }</code> </li> </ul> </li> </ul> Examples <pre><code>    // Remove all recipes for stone pickaxes:\n    event.remove({ output: 'minecraft:stone_pickaxe' });\n\n    // Remove recipes using the Wool tag:\n    event.remove({ output: '#minecraft:wool' });\n\n    // Remove recipes using Redstone Dust:\n    event.remove({ input: '#forge:dusts/redstone' });\n\n    // Remove all recipes from Farmer's Delight:\n    event.remove({ mod: 'farmersdelight' });\n\n    // Remove campfire cooking recipes:\n    event.remove({ type: 'minecraft:campfire_cooking' });\n\n    // Remove all recipes for stone except smelting:\n    event.remove({ not: { type: 'minecraft:smelting' }, output: 'stone' });\n\n    // Remove recipes for cooked chicken on a campfire:\n    event.remove({ output: 'minecraft:cooked_chicken', type: 'minecraft:campfire_cooking' });\n\n    // Remove smelting or blasting recipes for iron ingots:\n    event.remove([\n        { type: 'minecraft:smelting', output: 'minecraft:iron_ingot' },\n        { type: 'minecraft:blasting', output: 'minecraft:iron_ingot' }\n    ]);\n\n    // Remove a recipe by ID:\n    event.remove({ id: 'minecraft:glowstone' });\n</code></pre> <p>Recipe inputs or outputs can be replaced in bulk with <code>event.replaceInput()</code> or <code>event.replaceOutput()</code>:</p> <pre><code>event.replaceInput(\n    { input: 'minecraft:leather' }, // (1)\n    'minecraft:leather',            // (2)\n    'kubejs:treated_leather'        // (3)\n);\n</code></pre> <ol> <li>Filter: Selects recipes to modify.  </li> <li>Old Item: The item to replace.  </li> <li>New Item: The replacement item.  </li> </ol>"},{"location":"introduction/getting-started/first-scripts/#your-first-custom-items","title":"Your First Custom Items","text":"<p>Note</p> <p>Recall that custom items are done in the Startup Scripts folder, which means that changes done here will not come into effect until you relaunch Minecraft.</p> <pre><code>StartupEvents.registry('item', event =&gt; { // (1)\n  event.create('test_item') // (2)\n\n  // If you want to specify a different texture location you can do that too, like this:\n  event.create('treated_leather').texture('kubejs:item/earlygame/treated_leather') // (3)\n\n  // You can specify item type as 2nd argument in create(), some types have different available methods\n  event.create('custom_sword', 'sword').tier('diamond').attackDamageBaseline(10.0).displayName('My Sword') // (4)\n})\n</code></pre> <ol> <li>Listens for the item registry event.  </li> <li>The texture for this item has to be placed in <code>kubejs/assets/kubejs/textures/item/test_item.png</code>.  </li> <li>This texture would be located at <code>kubejs/assets/kubejs/textures/item/earlygame/treated_leather.png</code>. You can use different mod IDs as well.  </li> <li>If you want a custom model, you can create one in Blockbench and put it in <code>kubejs/assets/kubejs/models/item/custom_sword.json</code>. This is true for both items and blocks.</li> </ol> <p>More info on the large variety of itembuilder methods available can be found here.</p>"},{"location":"introduction/getting-started/first-scripts/#custom-blocks","title":"Custom Blocks","text":"<p>Custom blocks are pretty similar to custom items, being registered during startup. Blocks, however, can heavily utilize the tag system (covered in more detail later on), allowing you to easily define many things.</p> <pre><code>StartupEvents.registry('block', event =&gt; { // (1)  \n    // Basic block example\n    event.create('example_block') // (2)\n\n    // An example of some of the methods and tags available\n    event.create('example_block_2')\n        .displayName('My Custom Block') // (4)\n        .hardness(1.0) // (6)\n        .resistance(1.0) // (7)\n        .tagBlock('my_custom_tag') // (8)\n        .requiresTool(true) // (9)\n        .tagBlock('minecraft:mineable/axe') // (10)\n        .tagBlock('minecraft:mineable/pickaxe') // (11)\n        .tagBlock('minecraft:needs_iron_tool') // (12)\n});\n</code></pre> <ol> <li>Listens for the block registry event.  </li> <li>Create a new block with ID <code>kubejs:example_block</code>.  </li> <li>Demonstrates various methods available for customizing blocks.  </li> <li>Sets a custom display name for the block.  </li> <li>Specifies the block's hardness, influencing mining time.  </li> <li>Sets the block's resistance to explosions.  </li> <li>Tags the block with <code>#minecraft:my_custom_tag</code>.  </li> <li>Requires a tool to drop the block when mined.  </li> <li>Indicates the block can be mined faster with an axe.  </li> <li>Or pickaxe.  </li> <li>Requires a tool with at least iron tier to mine the block.</li> </ol> <p>Like with items, blocks have a large number of methods available to you.</p>"},{"location":"introduction/getting-started/first-scripts/#custom-fluids","title":"Custom Fluids","text":"<p>Fluids are also like the above two; their methods can be found here.</p> <pre><code>StartupEvents.registry('fluid', event =&gt; { // (1)\n    // Basic Fluid example\n  event.create('custom_fluid') // (2)\n    .thickTexture(0xFF0000) // (3)\n    .bucketColor(0xFF0000)\n    .displayName('Custom Fluid')\n\n  // Fluid with custom textures\n  event.create('strawberry_cream')\n    .displayName('Strawberry Cream')\n    .stillTexture('kubejs:block/strawberry_still')\n    .flowingTexture('kubejs:block/strawberry_flow')\n    .bucketColor(0xFF33FF) // (4)\n})\n</code></pre> <ol> <li>Listens for the fluid registry event.  </li> <li>Basic \"thick\" (looks like lava) fluid with red tint.  </li> <li><code>.thickTexture</code> is used to give it a \"thick\" (like lava) appearance, while <code>.thinTexture</code> gives it a \"thin\" appearance, has no bucket, and is not placeable.  </li> <li>You can set a custom bucket appearance for the fluid as well.</li> </ol>"},{"location":"introduction/getting-started/first-scripts/#client-events","title":"Client Events","text":"<p>The <code>client_scripts</code> folder contains scripts that are loaded every time client resources reload. These are used primarily for JEI events and tooltips.</p> <p>Remember that you can reload all code inside of this folder by pressing <code>F3 + T</code>, or you can reload all code outside of any event listeners by running <code>/kubejs reload client_scripts</code>.</p>"},{"location":"introduction/getting-started/first-scripts/#hiding-items-from-jei","title":"Hiding Items from JEI","text":"<p>Note that items hidden from JEI will still be able to be crafted. Thus, it is recommended to create a \"Nukescript\" that both hides the item and removes its recipes with just one input. Info on that can be found here.</p> <pre><code>JEIEvents.hideItems(event =&gt; {\n    event.hide(\"sophisticatedstorage:copper_barrel\") // (1)\n    event.hide(/^sophisticatedstorage:limited.+barrel.+$/) // (2)\n})\n</code></pre> <ol> <li>Hides the copper barrel item from appearing in JEI.  </li> <li>Hides anything that matches the regex filter from appearing in JEI.</li> </ol> <p>Regex (the pink text) and other methods of saving time are covered here.</p>"},{"location":"introduction/getting-started/first-scripts/#tooltips","title":"Tooltips","text":"<p>Tooltips are the text that appears below an item's name in-game. </p> <pre><code>ItemEvents.tooltip(tooltip =&gt; {\n    tooltip.add(\"minecraft:redstone_ore\", 'Does not produce a redstone signal'); // (1)\n    tooltip.add(\"minecraft:deepslate_redstone_ore\", Text.translatable(\"item.minecraft.deepslate_redstone_ore.tooltip\")); // (2)\n})\n</code></pre> <ol> <li>Item, text. Regex and arrays work here, but not tags, as those are registered later.  </li> <li>Localization is covered in a later section, but it is worth mentioning now.</li> </ol> <p>Alongside the straightforward <code>tooltip.add</code>, <code>tooltip.addAdvanced</code> lets you get a bit more creative, covered in the tooltip events section.</p>"},{"location":"introduction/getting-started/installing/","title":"Introduction and Installation","text":"<p>KubeJS is a mod that lets you modify a lot about Minecraft, in a quick and easy way. As such, it's become the prime tool for Modpack Developers looking to add and edit things together.</p>"},{"location":"introduction/getting-started/installing/#installation","title":"Installation","text":"<p>Install the mod and its two dependencies Architectury and Rhino. Make sure that you use the most resent version of each mods for your version.  </p> <p>When you first install KubeJS, you will need to launch Minecraft with the mods to generate the some folders and files.</p>"},{"location":"introduction/getting-started/installing/#the-kubejs-folder","title":"The KubeJS folder","text":""},{"location":"introduction/getting-started/installing/#finding-it","title":"Finding it","text":"<p>Everything you do in KubeJS in located in the kubejs folder in your instance.</p> <ul> <li>In Prism the file structure will look like <code>polymc &gt; instances &gt; (instance name) &gt; minecraft &gt; kubejs</code></li> <li>In the CurseForge launcher the file structure will look like <code>curseforge &gt; minecraft &gt; instances &gt; (instance name) &gt; kubejs</code><ul> <li>In all of the above cases the <code>(instance name)</code> is the name of the instance</li> </ul> </li> <li>In the normal Minecraft launcher it will be <code>.minecraft &gt; kubejs</code>, unless you changed the instance folder, but using the normal launcher for modding is highly discourged, due to the above offering utility.</li> </ul> <p>From now on, this will be referenced as the kubejs folder.</p>"},{"location":"introduction/getting-started/installing/#the-contents","title":"The contents","text":"<p>When you are first getting started, these three folders will be the most important.</p> startup_scriptsserver_scriptsclient_scripts <ul> <li>Scripts that get loaded once during game startup</li> <li>Used for adding items and other things that can only happen while the game is loading</li> <li>Can reload code not in an event with <code>/kubejs reload_startup_scripts</code></li> <li>To reload all the code you must restart the game</li> </ul> <ul> <li>Scripts that get loaded every time server resources reload (world load, <code>/reload</code>)</li> <li>Used for modifying: <ul> <li>recipes</li> <li>tags</li> <li>loot tables</li> <li>handling server events</li> </ul> </li> <li>Can reload code not in an event with <code>/kubejs reload server_scripts</code></li> <li>Can be all the code in server_scripts with <code>/reload</code></li> </ul> <ul> <li>Scripts that get loaded every time client resources reload</li> <li>Used for: <ul> <li>JEI events</li> <li>tooltips</li> <li>other client side things</li> </ul> </li> <li>Can reload code not in an event with <code>/kubejs reload client_scripts</code></li> <li>Can reload all the code in client_scripts with F3+T</li> </ul>"},{"location":"introduction/getting-started/installing/#useful-commands","title":"Useful commands","text":"<p>Typing in <code>/kubejs hand</code> ingame will display your currently held item's name and tags, clicking on one of these will copy it to your clipboard. This can also be shortened to <code>/kjs hand</code>, and you can also use the up arrow to resend a previously send command.</p> <p>The <code>/kubejs hotbar</code> and <code>/kubejs inventory</code> will print what you are currently holding into chat as an array, which you can click on as well.</p>"},{"location":"introduction/getting-started/installing/#other-useful-tools","title":"Other Useful Tools","text":"<p>Code is just a language that computers can understand. However, the grammar of the language, called syntax for code, is very precise. When you code has a syntactical error, the computer does not know what to do and will probably do something that you do not desire.</p> <p>With KubeJS we will be writing a lot of code, so it important to avoid these errors. Luckily, there are tools called code editors, that can help us write code correctly.</p> <p>Installing Visual Studio Code is recommended, as it is light-ish and has great built in JS support. Now when you edit you javascript files, it will not only warn you when you make most syntactical errors, but also help you prevent them in the first place.</p>"},{"location":"introduction/getting-started/tags/","title":"Tags","text":"<p>Minecraft uses tags to group items, blocks, fluids, and entity types together for various game mechanics. Tags are essentially collections of game elements that share common characteristics or purposes. They're used extensively throughout the game for: </p> <ul> <li>Recipes (using item tags)</li> <li>Game mechanics (climbable blocks, mineable requirements)</li> <li>Mod compatibility</li> <li>World generation</li> <li>and more!</li> </ul> <p>You can easily view an item/block's tags by holding it and using <code>/kubejs hand</code>. If advanced tooltips are enabled, it will also show an item's tags when hovered over. A list of minecraft's tags can be viewed here.</p>"},{"location":"introduction/getting-started/tags/#adding-tags","title":"Adding Tags","text":"<p>Note</p> <p>You do not have to manually define the tags themselves anywhere, using any of the following functions below will also register the tag.</p>"},{"location":"introduction/getting-started/tags/#tagging-in-server-events","title":"Tagging in Server Events","text":""},{"location":"introduction/getting-started/tags/#item-tags","title":"Item tags","text":"<p>These tags are primarily used in recipes, and can also be used to influence how a item behaves when it is dropped, equipped, or used.  <pre><code>ServerEvents.tags('item', event =&gt; {\n        event.add('forge:cobblestone', 'minecraft:diamond_ore') //(1)\n        event.remove('forge:cobblestone', 'minecraft:mossy_cobblestone') //(2)\n        event.removeAllTagsFrom('minecraft:stick') //(3)\n        event.removeAll('forge:ingots/copper') //(4)\n        event.add('mymodpack:completely_new_tag', 'minecraft:clay_ball') //(5)\n        event.add('mymodpack:stones', '#forge:stone') //(6)\n        event.add('minecraft:stone_pressure_plates', [\n            'minecraft:stone_pressure_plate',\n            'minecraft:polished_blackstone_pressure_plate'\n        ]) //(7)\n        event.add('mymodpack:stone_redstone_activators', [\n            '#minecraft:stone_buttons',\n            '#minecraft:stone_pressure_plates',\n            'minecraft:lever'\n        ]) //(8)\n})\n</code></pre></p> <ol> <li>Add to Tag: Adds <code>minecraft:diamond_ore</code> to the <code>#forge:cobblestone</code> tag.  </li> <li>Remove from Tag: Removes <code>minecraft:mossy_cobblestone</code> from the <code>#forge:cobblestone</code> tag.  </li> <li>Remove All Tags: Clears all tags associated with <code>minecraft:stick</code>.  </li> <li>Remove All Entries: Clears all items from the <code>#forge:ingots/copper</code> tag.  </li> <li>Create New Tag: Creates a new tag <code>#mymodpack:completely_new_tag</code> and adds <code>minecraft:clay_ball</code> to it. New tags can use any namespace.</li> <li>Tag Nesting: Adds the <code>forge:stone</code> tag as a child of the <code>#mymodpack:stones</code> tag.</li> <li>Array of Entries: Adds <code>minecraft:stone_pressure_plate</code> and <code>minecraft:polished_blackstone_pressure_plate</code> to the new tag <code>#minecraft:stone_pressure_plates</code>.</li> <li>Array of Entries and Tags: Adds the <code>#minecraft:stone_buttons</code> and <code>#minecraft:stone_pressure_plates</code> tags as children and adds <code>minecraft:lever</code> to the <code>#mymodpack:stone_redstone_activators</code> tag.</li> </ol>"},{"location":"introduction/getting-started/tags/#block-tags","title":"Block tags","text":"<p>Block tags influnce what a behaviors a block has, as well as seeing use in world generation. <pre><code>ServerEvents.tags('block', event =&gt; {\n  event.add('minecraft:climbable', 'minecraft:tall_grass') //(1)\n  event.add('minecraft:moss_replaceable', 'minecraft:bedrock') //(2)\n    event.add('minecraft:jungle_logs', '#mushroom_grow_block') //(3)\n})\n</code></pre></p> <ol> <li>Adds tall grass to the climbable tag. This does make it climbable!</li> <li>Adds bedrock to the <code>minecraft:moss_replaceable</code> tag, making it replacable with moss blocks when a nearby moss block has bone meal applied to it. </li> <li>Adds the <code>jungle_logs</code> block tag as a child of the <code>c:stones</code> tag. </li> </ol>"},{"location":"introduction/getting-started/tags/#tagging-during-startup","title":"Tagging During Startup","text":"<p>You can also add tags when said items/blocks are being registered. <pre><code>StartupEvents.registry('block', event =&gt; {\n  event.create('example_block')\n    .tagBlock('minecraft:mineable/pickaxe')\n    .tagBlock('minecraft:needs_iron_tool')\n    .tagBlock('my_namespace:my_custom_tag')\n})\n\nStartupEvents.registry('item', event =&gt; {\n  event.create('custom_item')\n    .tagItem('forge:ingots')\n    .tagItem('my_namespace:special_items')\n})\n</code></pre></p>"},{"location":"introduction/getting-started/tags/#using-tags-in-recipes","title":"Using tags in recipes","text":"<p>Warning</p> <p>Recipes use item tags, not block or fluid tags. Even if items representing those are blocks, like <code>minecraft:cobblestone</code>, it still uses an item tag for recipes.</p> <p>Tags can be used in most places where items are supported, with the hash sign. Tags can't be used as a recipe output.</p> <pre><code>event.shaped(\n  Item.of('minecraft:chest', 4), [\n    'LLL',\n    'L L', \n    'LLL'\n  ],{\n    L: '#minecraft:logs'\n  }\n)\n\nevent.stonecutting('3x minecraft:stick', '#minecraft:planks')\n</code></pre>"},{"location":"introduction/other/custom-window/","title":"Header","text":"<p>Page content here...</p>"},{"location":"introduction/other/localization/","title":"Header","text":"<p>Page content here...</p>"},{"location":"introduction/saving-time/helpful-mods/","title":"Helpful Mods","text":"<p>Work In Progress</p> <p>The contents found here are not completely documented, please consider submitting a Pull Request with additional information.</p> <p>Alongside KubeJS, there are some other mods can help you while Pack Developing.</p>"},{"location":"introduction/saving-time/helpful-mods/#probejs","title":"ProbeJS","text":"<p>Adds VSCode intellisense support for KubeJS.</p> The curseforge page explains how to install."},{"location":"introduction/saving-time/helpful-mods/#kubejs-offline-documenation","title":"KubeJS Offline Documenation","text":"<p>KubeJS Offline is a mod that dumps all class data at runtime into a single html file using a single command - <code>/kubejs_offline</code>.</p> <p>Previews of these pages can be found on the curseforge mod page.</p>"},{"location":"introduction/saving-time/helpful-mods/#almost-unified","title":"Almost Unified","text":"<p>Helps unify resources (ingots, etc) without having to do it manually. </p>"},{"location":"introduction/saving-time/helpful-mods/#polymorph","title":"Polymorph","text":"<p>Can be used to easily find conflicting recipes with the command <code>/polymorph conflicts</code>.</p>"},{"location":"introduction/saving-time/loops/","title":"Loops, Functions, and Regex","text":"<p>Work In Progress</p> <p>The contents found here are not completely done, please consider submitting a Pull Request to improve it.</p>"},{"location":"introduction/saving-time/loops/#regex-loops-and-functions","title":"Regex, Loops, and Functions","text":"<p>After reading the previous chapters, you might have started thinking about custom recipes and items. You might have even considered how many recipes you would need to tweak and how much time it would take to write them individually, like datapacks. Thankfully, you don't have to do that! You have a lot of tools at your disposal to make your life easier and your code more compact.</p>"},{"location":"introduction/saving-time/loops/#arrays","title":"Arrays","text":"<p>Some events allow you to use an array instead of just a single item, enabling you to perform actions on multiple items rather than needing separate methods for each.</p> <pre><code>JEIEvents.hideItems(event =&gt; {\n    event.hide([\"ae2:inscriber\", \"ae2:vibration_chamber\"]) // (1)\n})\n</code></pre> <ol> <li>Hides both the <code>ae2:inscriber</code> and the <code>ae2:vibration_chamber</code></li> </ol>"},{"location":"introduction/saving-time/loops/#loops","title":"Loops","text":"<p>Loops allow you to iterate over arrays and perform actions on each element. This is particularly useful when you have a list of items and want to apply the same logic to all of them.</p> <p>Here's an example of using a <code>foreach</code> loop to define recipes for upgrading furnaces:</p> <pre><code>const furnaces = [\n    [\"iron_furnace\", \"minecraft:iron_ingot\", \"minecraft:furnace\"],\n    [\"copper_furnace\", \"minecraft:copper_ingot\", \"ironfurnaces:iron_furnace\"],\n    [\"silver_furnace\", \"gtceu:silver_ingot\", \"ironfurnaces:copper_furnace\"],\n    [\"gold_furnace\", \"minecraft:gold_ingot\", \"ironfurnaces:silver_furnace\"],\n    [\"diamond_furnace\", \"minecraft:diamond\", \"ironfurnaces:gold_furnace\"],\n];\n\nfurnaces.forEach(([furnace, mat, base]) =&gt; { // (1)\n    event.shaped(Item.of(`ironfurnaces:${furnace}`), [ // (2)\n        \"AAA\",\n        \"ABA\",\n        \"AAA\"\n    ], {\n        A: mat,\n        B: base,\n    });\n});\n</code></pre> <ol> <li>Iteration: The <code>foreach</code> loop iterates over each element in the <code>furnaces</code> array. Each element is destructured into <code>furnace</code>, <code>mat</code>, and <code>base</code>.</li> <li>Recipe Definition: For each furnace, a shaped recipe for the output furnace (<code>furnace</code>) is defined using the provided material (<code>mat</code>) and base furnace (<code>base</code>).</li> </ol>"},{"location":"introduction/saving-time/loops/#functions","title":"Functions","text":"<p>Functions allow you to reuse code by defining a function and repeatedly calling it with multiple arguments, even across different files! Knowing a little bit of javascript can go a very long way when working with functions.</p> <p><pre><code>  let potting = (output, pottedInput) =&gt; { // (1)\n    event.shaped(output, [\n      'BIB',\n      ' B '\n    ], {\n      B: 'minecraft:brick',\n      I: pottedInput\n    })\n  }\n\n  potting('kubejs:potted_snowball', 'minecraft:snowball') // (2)\n  potting('kubejs:potted_lava', 'minecraft:lava_bucket')\n  potting('minecraft:blast_furnace', 'minecraft:furnace')\n</code></pre> 1. Defines helper function <code>potting</code> with the elements of of <code>output</code> and <code>pottedInput</code> 2. Creating shaped recipes using the helper</p>"},{"location":"introduction/saving-time/loops/#helper-functions","title":"Helper Functions","text":"<p>Using the knowledge that you can call constants across different files, you could create a helper file with various functions in it and simply call them from anywhere.</p> <pre><code>// priority: 9999\n\n// The function being defined.\nconst donutCraft = (event, output, center, ring) =&gt; {\n    return event.shaped(output, [\n        \"SSS\",\n        \"SCS\",\n        \"SSS\"\n    ], {\n        C: center,\n        S: ring\n    });\n};\n</code></pre> <pre><code>// Various usages of this function in various other files\ndonutCraft(event, \"minecraft:weeping_vines\", \"occultism:spirit_attuned_gem\", \"minecraft:twisting_vines\");\ndonutCraft(event, \"minecraft:twisting_vines\", \"occultism:spirit_attuned_gem\", \"minecraft:weeping_vines\");\n\ndonutCraft(event, Item.of(\"functionalstorage:void_upgrade\", 4), \"#functionalstorage:drawer\", \"minecraft:obsidian\");\n\ndonutCraft(event, \"sophisticatedbackpacks:stack_upgrade_starter_tier\", \"sophisticatedbackpacks:upgrade_base\", \"create:andesite_alloy\");\ndonutCraft(event, \"sophisticatedbackpacks:stack_upgrade_tier_1\", \"sophisticatedbackpacks:stack_upgrade_starter_tier\", \"create:brass_ingot\");\n</code></pre>"},{"location":"introduction/saving-time/loops/#applying-knowledge","title":"Applying knowledge","text":"<p>Of course, functions aren't as rigid as the above examples imply. With a little bit of JavaScript knowledge, you can create pretty some nice things.</p> <p>The function below is excerpted from CABIN, and is used to generate the recipes used to turn machines into usable parts. If the fourth parameter is omitted, it defaults to creating a stonecutting recipe instead.</p> <pre><code>const createMachine = (machineItem, event, outputIngredient, inputIngredient) =&gt; { // (1)\n    machineItem = Ingredient.of(machineItem);\n    outputIngredient = Item.of(outputIngredient);\n\n    event.remove({ output: outputIngredient });\n    if (inputIngredient) { // (2)\n        inputIngredient = Ingredient.of(inputIngredient);\n        event.custom({\n            \"type\": \"create:item_application\",\n            \"ingredients\": [\n                machineItem.toJson(),\n                inputIngredient.toJson()\n            ],\n            \"results\": (outputIngredient.isBlock() &amp;&amp; outputIngredient.getCount() &gt; 1) ? // (3)\n                [\n                    outputIngredient.withCount(1).toJson(),\n                    outputIngredient.withCount(outputIngredient.getCount() - 1).toJson() // (4)\n                ]\n                :\n                [\n                    outputIngredient.toJson()\n                ]\n        });\n    } else { \n        event.stonecutting(outputIngredient, machineItem); // (5)\n    }\n};\n</code></pre> <ol> <li>Parameters:<ul> <li><code>machineItem</code>: The base ingredient (e.g., the machine being used).</li> <li><code>event</code>: The recipe event.</li> <li><code>outputIngredient</code>: The resulting item.</li> <li><code>inputIngredient</code> (optional): The secondary ingredient.</li> </ul> </li> <li>Checks to see if the call has an <code>inputIngredient</code> and determines which code block should be run.</li> <li>Checks the type and number of <code>outputIngredient</code>. If it passes, the first block is run; otherwise, the second block is run.</li> <li>This is done because of how the <code>create:item_application</code> recipe works: The block in the first slot of the <code>item_application</code> array is the one that is placed in the world, while the others are dropped as items. Having them all in the first slot would cause the others to be voided.</li> <li>Runs if the check for <code>inputIngredient</code> fails.</li> </ol> <pre><code>// Using the function elsewhere\ncreateMachine(\"computercraft:computer_normal\", event, \"computercraft:turtle_normal\", \"thermal:invar_gear\");\ncreateMachine(\"minecraft:obsidian\", event, Item.of(\"minecraft:crying_obsidian\", 2)); \n</code></pre>"},{"location":"introduction/saving-time/loops/#callback-functions","title":"Callback Functions","text":"<p>Likewise, you can define functions that call other functions. For example:</p> <pre><code>// Defining the functions\nconst andesiteMachine = (event, outputIngredient, inputIngredient) =&gt; {\n    return createMachine(\"kubejs:andesite_machine\", event, outputIngredient, inputIngredient);\n}\n\nconst leadMachine = (event, outputIngredient, inputIngredient) =&gt; {\n    return createMachine(\"kubejs:lead_machine\", event, outputIngredient, inputIngredient);\n}\n\n// Using the function elsewhere\nandesiteMachine(event, Item.of(\"create:mechanical_mixer\", 1), \"create:whisk\");\nleadMachine(event, Item.of(\"create:factory_gauge\", 2));\n\nif (Platform.isLoaded(\"createdeco\")) { // (1)\n    andesiteMachine(event, Item.of(\"create:mechanical_roller\", 1), \"createdeco:andesite_hull\");\n} else { // (2)\n    andesiteMachine(event, Item.of(\"create:mechanical_roller\", 1), \"create:andesite_alloy_block\");\n}\n</code></pre> <ol> <li>Checks to see if the mod \"createdeco\" is loaded and determines what should be done.</li> <li>Ifs, switches, and otherwise are not limited to just functions or mechanics!</li> </ol>"},{"location":"introduction/saving-time/loops/#regex","title":"Regex","text":"<p>A regex, shorthand for \"regular expression\", is a pattern describing a certain amount of text. Essentially, it acts as a filter, allowing anything that matches to pass. Regex can be quite powerful, enabling you to search with surprisingly complex options. Getting into the nitty-gritty of regex is beyond this guide (consider looking here for a starting place), but here are some practical examples:</p> <pre><code>JEIEvents.hideItems(event =&gt; {\n    event.hide(/kubejs:trial/); //(1)\n    event.hide(/^sophisticatedstorage:limited.+barrel.+$/); //(2)\n    event.hide(/^ad_astra:(steel|desh|ostrum|calorite)_(tank|engine)$/); //(3)\n});\n</code></pre> <ol> <li>Hides anything that matches the regex filter of: <code>kubejs:trial</code>  So, anything that has kubejs:trial in its name, such as \"kubejs:trial_cut_copper\" or \"kubejs:trial_copper_grate\".</li> <li>Hides anything that matches the regex filter of: <code>sophisticatedstorage:limited [arbitrary text] barrel [arbitrary text]</code>  So, any limited barrels.</li> <li>Hides anything that matches the regex filter of: <code>ad_astra: [steel OR desh OR ostrum OR calorite] _ [tank OR engine]</code>  So, anything that matches any of those combos.</li> </ol>"}]}